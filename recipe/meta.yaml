{% set name = "cppimport" %}
{% set version = "22.8.2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: bbb4957102db41bc99ad72c233bce92f9d1fd91be352fc07878c4361033a401f

build:
  noarch: python
  script: {{ PYTHON }} -m pip install . -vv
  number: 0

requirements:
  build:
  host:
    - python
    - pip
    - setuptools_scm
  run:
    - filelock
    - mako
    - pybind11
    - python >=3.7
    - setuptools

test:
  source_files:
    - tests
  imports:
    - cppimport
  requires:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - pip
    - pytest
  commands:
    - pip check
    - pytest -v tests/test_cppimport.py  # [not win]

about:
  home: https://github.com/tbenthompson/cppimport
  summary: Import C++ directly from Python!
  description: |
    Sometimes Python just isn't fast enough. Or you have existing code in a C or C++ library. So, you write a Python extension module, a library of compiled code. I recommend pybind11 for C++ to Python bindings or cffi for C to Python bindings. I've done this a lot over the years. But, I discovered that my productivity is slower when my development process goes from Edit -> Test in just Python to Edit -> Compile -> Test in Python plus C++. So, cppimport combines the process of compiling and importing an extension in Python so that you can just run import foobar and not have to worry about multiple steps. Internally, cppimport looks for a file foobar.cpp. Assuming one is found, it's run through the Mako templating system to gather compiler options, then it's compiled and loaded as an extension module.
  license: MIT
  license_family: MIT
  license_file: LICENSE

extra:
  recipe-maintainers:
    - minrk
